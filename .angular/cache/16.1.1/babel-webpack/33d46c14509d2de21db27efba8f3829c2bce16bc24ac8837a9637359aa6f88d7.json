{"ast":null,"code":"import _defineProperty from \"C:/Users/nueut/OneDrive/\\u6587\\u4EF6/GitHub/angular/angular_module/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport SignaturePad from 'signature_pad';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nconst _c0 = [\"fullScreenTpl\"];\nconst _c1 = [\"nspSmall\"];\nconst _c2 = [\"nspBig\"];\nconst _c3 = function (a0) {\n  return {\n    \"height\": a0\n  };\n};\nfunction NgxSignaturePadComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵelement(1, \"div\", 3)(2, \"canvas\", null, 4)(4, \"div\", 5);\n    i0.ɵɵprojection(5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c3, ctx_r2.sectionHeight + \"px\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(4, _c3, ctx_r2.sectionHeight + \"px\"));\n  }\n}\nconst _c4 = [\"*\"];\nclass NgxSignaturePadComponent {\n  get activePad() {\n    return this.isFullScreen ? this.bigPad : this.smallPad;\n  }\n  fullScreen() {\n    this.portal = new TemplatePortal(this.fullScreenTpl, this.viewContainerRef);\n    this.overlayRef = this.overlay.create({\n      positionStrategy: this.overlay.position().global(),\n      scrollStrategy: this.overlay.scrollStrategies.block(),\n      height: '100%',\n      width: '100%'\n    });\n    this.overlayRef.attach(this.portal);\n    setTimeout(() => {\n      this.initBigPad();\n      // #region Copy miniScreen's content to fullScreen\n      const {\n        width: miniScreenWidth,\n        height: miniScreenHeight\n      } = this.options;\n      const ctx = this.bigCanvas.getContext('2d');\n      ctx.save();\n      ctx.translate(this.fullScreenWidth, 0);\n      ctx.rotate(90 * Math.PI / 180);\n      ctx.drawImage(this.smallCanvas, 0, 0, miniScreenWidth, miniScreenHeight, 0, 0, this.fullScreenHeight, this.fullScreenWidth);\n      ctx.restore();\n      // #endregion\n    }, 0);\n    this.isFullScreen = true;\n  }\n  miniScreen() {\n    this.smallPad.clear();\n    // #region Copy fullScreen's content to miniScreen\n    const {\n      width: miniScreenWidth,\n      height: miniScreenHeight\n    } = this.options;\n    const widthScale = miniScreenWidth / this.fullScreenHeight;\n    const heightScale = miniScreenHeight / this.fullScreenWidth;\n    const ctx = this.smallCanvas.getContext('2d');\n    ctx.save();\n    ctx.translate(0, miniScreenHeight);\n    ctx.rotate(-90 * Math.PI / 180);\n    ctx.drawImage(this.bigCanvas, 0, 0, this.fullScreenWidth, this.fullScreenHeight, 0, 0, this.fullScreenWidth * widthScale, this.fullScreenHeight * heightScale);\n    ctx.restore();\n    // #endregion\n    this.overlayRef.dispose();\n    this.bigCanvas = null;\n    this.bigPad = null;\n    this.isFullScreen = false;\n  }\n  /** Returns signature image as an array of point groups */\n  toData() {\n    return this.activePad.toData();\n  }\n  /** Draws signature image from an array of point groups */\n  fromData(pointGroups) {\n    this.activePad.fromData(pointGroups);\n  }\n  toDataURL(type) {\n    switch (type) {\n      case 'image/jpeg':\n        return this.activePad.toDataURL('image/jpeg');\n      case 'image/svg+xml':\n        return this.activePad.toDataURL('image/svg+xml');\n      default:\n        return this.activePad.toDataURL();\n    }\n  }\n  fromDataURL(dataUrl, options, callback) {\n    this.activePad.fromDataURL(dataUrl, options, callback);\n  }\n  revert() {\n    this.signDataHistory.pop();\n    this.fromData(this.signDataHistory);\n    if (this.signDataHistory.length === 0) {\n      this.setEmpty();\n    }\n  }\n  // Clears the canvas\n  clear() {\n    this.setEmpty();\n    this.signDataHistory = [];\n    this.activePad.clear();\n  }\n  /** Return true if canvas is empty, otherwise return false */\n  isEmpty() {\n    return this._isEmpty;\n  }\n  /** Set canvas's state as dirty */\n  setDirty() {\n    this._isEmpty = false;\n  }\n  /** Set canvas's state as empty */\n  setEmpty() {\n    this._isEmpty = true;\n  }\n  getContext() {\n    return this.isFullScreen ? this.bigCanvas.getContext('2d') : this.smallCanvas.getContext('2d');\n  }\n  initBigPad() {\n    this.bigCanvas = this.nspBig.nativeElement; //document.querySelector('#nsp-big');\n    const fullScreenOptions = JSON.parse(JSON.stringify(this.options));\n    // Calculate the fullScreen pad's size\n    this.fullScreenWidth = document.documentElement.clientWidth;\n    const {\n      width: miniScreenWidth,\n      height: miniScreenHeight\n    } = this.options;\n    this.fullScreenHeight = this.fullScreenWidth * miniScreenWidth / miniScreenHeight;\n    // Calculate section size\n    const viewHeight = document.documentElement.clientHeight;\n    const space = viewHeight - this.fullScreenHeight;\n    this.sectionHeight = space / 2;\n    // Init pad\n    fullScreenOptions.width = this.fullScreenWidth;\n    fullScreenOptions.height = this.fullScreenHeight;\n    const {\n      css\n    } = fullScreenOptions;\n    this.bigCanvas.width = this.fullScreenWidth;\n    this.bigCanvas.height = this.fullScreenHeight;\n    for (const key in css) {\n      if (Object.prototype.hasOwnProperty.call(css, key)) {\n        const value = css[key];\n        this.renderer2.setStyle(this.bigCanvas, key, value);\n      }\n    }\n    this.bigPad = new SignaturePad(this.bigCanvas, fullScreenOptions);\n    this.bigPad.onBegin = this._onBegin.bind(this);\n    this.bigPad.onEnd = this._onEnd.bind(this);\n  }\n  initSmallPad() {\n    this.smallCanvas = this.nspSmall.nativeElement; //document.querySelector('#nsp-small');\n    const {\n      width,\n      height,\n      css\n    } = this.options;\n    this.options.width = width ? width : 300;\n    this.options.height = height ? height : 150;\n    this.smallCanvas.width = this.options.width;\n    this.smallCanvas.height = this.options.height;\n    for (const key in css) {\n      if (Object.prototype.hasOwnProperty.call(css, key)) {\n        const value = css[key];\n        this.renderer2.setStyle(this.smallCanvas, key, value);\n      }\n    }\n    this.smallPad = new SignaturePad(this.smallCanvas, this.options);\n    this.smallPad.onBegin = this._onBegin.bind(this);\n    this.smallPad.onEnd = this._onEnd.bind(this);\n  }\n  _onBegin() {\n    this.setDirty(); // When user draws, set state as dirty\n    this.beginSign.emit();\n  }\n  _onEnd() {\n    this.signDataHistory = this.toData();\n    this.endSign.emit();\n  }\n  setPadAttribute(key, value) {\n    if (this.bigPad) {\n      this.bigPad[key] = value;\n    }\n    this.smallPad[key] = value;\n  }\n  constructor(renderer2, overlay, viewContainerRef) {\n    _defineProperty(this, \"renderer2\", void 0);\n    _defineProperty(this, \"overlay\", void 0);\n    _defineProperty(this, \"viewContainerRef\", void 0);\n    // #region The object of dependency 'siganture_pad'\n    _defineProperty(this, \"smallPad\", void 0);\n    _defineProperty(this, \"bigPad\", void 0);\n    // #endregion\n    // #region The object of canvas\n    _defineProperty(this, \"smallCanvas\", void 0);\n    _defineProperty(this, \"bigCanvas\", void 0);\n    // #endregion\n    // #region CDK\n    _defineProperty(this, \"overlayRef\", void 0);\n    _defineProperty(this, \"portal\", void 0);\n    // #endregion\n    _defineProperty(this, \"signDataHistory\", []);\n    _defineProperty(this, \"fullScreenWidth\", void 0);\n    _defineProperty(this, \"fullScreenHeight\", void 0);\n    _defineProperty(this, \"_isEmpty\", true);\n    _defineProperty(this, \"isFullScreen\", false);\n    _defineProperty(this, \"sectionHeight\", void 0);\n    _defineProperty(this, \"options\", {});\n    _defineProperty(this, \"beginSign\", new EventEmitter());\n    _defineProperty(this, \"endSign\", new EventEmitter());\n    _defineProperty(this, \"fullScreenTpl\", void 0);\n    _defineProperty(this, \"nspSmall\", void 0);\n    _defineProperty(this, \"nspBig\", void 0);\n    this.renderer2 = renderer2;\n    this.overlay = overlay;\n    this.viewContainerRef = viewContainerRef;\n  }\n  ngAfterViewInit() {\n    this.initSmallPad();\n  }\n  ngOnChanges(changes) {\n    if (changes.options.firstChange) {\n      return;\n    }\n    const {\n      dotSize,\n      minWidth,\n      maxWidth,\n      throttle,\n      minDistance,\n      backgroundColor,\n      penColor,\n      velocityFilterWeight,\n      width,\n      height,\n      css\n    } = changes.options.currentValue;\n    if (dotSize) {\n      this.setPadAttribute('dotSize', dotSize);\n    }\n    if (minWidth) {\n      this.setPadAttribute('minWidth', minWidth);\n    }\n    if (maxWidth) {\n      this.setPadAttribute('maxWidth', maxWidth);\n    }\n    if (throttle) {\n      this.setPadAttribute('throttle', throttle);\n    }\n    if (minDistance) {\n      this.setPadAttribute('minDistance', minDistance);\n    }\n    if (backgroundColor) {\n      this.setPadAttribute('backgroundColor', backgroundColor);\n    }\n    if (penColor) {\n      this.setPadAttribute('penColor', penColor);\n    }\n    if (velocityFilterWeight) {\n      this.setPadAttribute('velocityFilterWeight', velocityFilterWeight);\n    }\n    if (width || height) {\n      const {\n        width: previousWidth,\n        height: previousHeight\n      } = changes.options.previousValue;\n      const data = this.smallPad.toDataURL();\n      const image = new Image();\n      image.src = data;\n      image.onload = () => {\n        this.initSmallPad();\n        const ctx = this.smallCanvas.getContext('2d');\n        ctx.drawImage(image, 0, 0, previousWidth, previousHeight, 0, 0, width, height);\n      };\n    }\n    if (css) {\n      if (this.bigCanvas) {\n        for (const key in css) {\n          if (Object.prototype.hasOwnProperty.call(css, key)) {\n            const value = css[key];\n            this.renderer2.setStyle(this.bigCanvas, key, value);\n          }\n        }\n      }\n      if (this.smallCanvas) {\n        for (const key in css) {\n          if (Object.prototype.hasOwnProperty.call(css, key)) {\n            const value = css[key];\n            this.renderer2.setStyle(this.smallCanvas, key, value);\n          }\n        }\n      }\n    }\n  }\n}\n_defineProperty(NgxSignaturePadComponent, \"\\u0275fac\", function NgxSignaturePadComponent_Factory(t) {\n  return new (t || NgxSignaturePadComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.Overlay), i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n});\n_defineProperty(NgxSignaturePadComponent, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxSignaturePadComponent,\n  selectors: [[\"ngx-signature-pad\"]],\n  viewQuery: function NgxSignaturePadComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n      i0.ɵɵviewQuery(_c1, 5);\n      i0.ɵɵviewQuery(_c2, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fullScreenTpl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nspSmall = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nspBig = _t.first);\n    }\n  },\n  inputs: {\n    options: \"options\"\n  },\n  outputs: {\n    beginSign: \"beginSign\",\n    endSign: \"endSign\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c4,\n  decls: 4,\n  vars: 0,\n  consts: [[\"nspSmall\", \"\"], [\"fullScreenTpl\", \"\"], [1, \"nsp-container\"], [1, \"section\", \"left\", 2, \"width\", \"100%\", 3, \"ngStyle\"], [\"nspBig\", \"\"], [1, \"section\", \"right\", 2, \"width\", \"100%\", 3, \"ngStyle\"]],\n  template: function NgxSignaturePadComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelement(0, \"canvas\", null, 0);\n      i0.ɵɵtemplate(2, NgxSignaturePadComponent_ng_template_2_Template, 6, 6, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n  },\n  dependencies: [i2.NgStyle],\n  styles: [\".nsp-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;position:fixed;left:0;top:0;width:100%;height:100vh;background:#fff}.nsp-container[_ngcontent-%COMP%]   .section[_ngcontent-%COMP%]{flex:1}.nsp-container[_ngcontent-%COMP%]   .section.left[_ngcontent-%COMP%]{border-bottom:2px dashed #dedee5}.nsp-container[_ngcontent-%COMP%]   .section.right[_ngcontent-%COMP%]{border-top:2px dashed #dedee5}\"]\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSignaturePadComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-signature-pad',\n      template: \"<canvas #nspSmall></canvas>\\n\\n<ng-template #fullScreenTpl>\\n  <div class=\\\"nsp-container\\\">\\n    <div class=\\\"section left\\\" style=\\\"width: 100%;\\\" [ngStyle]=\\\"{'height': sectionHeight + 'px'}\\\"></div>\\n    <canvas #nspBig></canvas>\\n    <div class=\\\"section right\\\" style=\\\"width: 100%;\\\" [ngStyle]=\\\"{'height': sectionHeight + 'px'}\\\"></div>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\",\n      styles: [\".nsp-container{display:flex;flex-direction:column;position:fixed;left:0;top:0;width:100%;height:100vh;background:#fff}.nsp-container .section{flex:1}.nsp-container .section.left{border-bottom:2px dashed #dedee5}.nsp-container .section.right{border-top:2px dashed #dedee5}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i1.Overlay\n    }, {\n      type: i0.ViewContainerRef\n    }];\n  }, {\n    options: [{\n      type: Input\n    }],\n    beginSign: [{\n      type: Output\n    }],\n    endSign: [{\n      type: Output\n    }],\n    fullScreenTpl: [{\n      type: ViewChild,\n      args: ['fullScreenTpl']\n    }],\n    nspSmall: [{\n      type: ViewChild,\n      args: ['nspSmall', {\n        static: false\n      }]\n    }],\n    nspBig: [{\n      type: ViewChild,\n      args: ['nspBig', {\n        static: false\n      }]\n    }]\n  });\n})();\nclass NgxSignaturePadModule {}\n_defineProperty(NgxSignaturePadModule, \"\\u0275fac\", function NgxSignaturePadModule_Factory(t) {\n  return new (t || NgxSignaturePadModule)();\n});\n_defineProperty(NgxSignaturePadModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxSignaturePadModule\n}));\n_defineProperty(NgxSignaturePadModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule, OverlayModule]\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSignaturePadModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule],\n      declarations: [NgxSignaturePadComponent],\n      exports: [NgxSignaturePadComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-signature-pad\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxSignaturePadComponent, NgxSignaturePadModule };","map":{"version":3,"names":["i0","EventEmitter","Component","Input","Output","ViewChild","NgModule","SignaturePad","TemplatePortal","i1","OverlayModule","i2","CommonModule","_c0","_c1","_c2","_c3","a0","NgxSignaturePadComponent_ng_template_2_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵprojection","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵproperty","ɵɵpureFunction1","sectionHeight","_c4","NgxSignaturePadComponent","activePad","isFullScreen","bigPad","smallPad","fullScreen","portal","fullScreenTpl","viewContainerRef","overlayRef","overlay","create","positionStrategy","position","global","scrollStrategy","scrollStrategies","block","height","width","attach","setTimeout","initBigPad","miniScreenWidth","miniScreenHeight","options","bigCanvas","getContext","save","translate","fullScreenWidth","rotate","Math","PI","drawImage","smallCanvas","fullScreenHeight","restore","miniScreen","clear","widthScale","heightScale","dispose","toData","fromData","pointGroups","toDataURL","type","fromDataURL","dataUrl","callback","revert","signDataHistory","pop","length","setEmpty","isEmpty","_isEmpty","setDirty","nspBig","nativeElement","fullScreenOptions","JSON","parse","stringify","document","documentElement","clientWidth","viewHeight","clientHeight","space","css","key","Object","prototype","hasOwnProperty","call","value","renderer2","setStyle","onBegin","_onBegin","bind","onEnd","_onEnd","initSmallPad","nspSmall","beginSign","emit","endSign","setPadAttribute","constructor","_defineProperty","ngAfterViewInit","ngOnChanges","changes","firstChange","dotSize","minWidth","maxWidth","throttle","minDistance","backgroundColor","penColor","velocityFilterWeight","currentValue","previousWidth","previousHeight","previousValue","data","image","Image","src","onload","NgxSignaturePadComponent_Factory","t","ɵɵdirectiveInject","Renderer2","Overlay","ViewContainerRef","ɵɵdefineComponent","selectors","viewQuery","NgxSignaturePadComponent_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","outputs","features","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","NgxSignaturePadComponent_Template","ɵɵprojectionDef","ɵɵtemplate","ɵɵtemplateRefExtractor","dependencies","NgStyle","styles","ngDevMode","ɵsetClassMetadata","args","selector","static","NgxSignaturePadModule","NgxSignaturePadModule_Factory","ɵɵdefineNgModule","ɵɵdefineInjector","imports","declarations","exports"],"sources":["C:/Users/nueut/OneDrive/文件/GitHub/angular/angular_module/node_modules/@eve-sama/ngx-signature-pad/fesm2022/eve-sama-ngx-signature-pad.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { EventEmitter, Component, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport SignaturePad from 'signature_pad';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport * as i1 from '@angular/cdk/overlay';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nclass NgxSignaturePadComponent {\n    renderer2;\n    overlay;\n    viewContainerRef;\n    // #region The object of dependency 'siganture_pad'\n    smallPad;\n    bigPad;\n    // #endregion\n    // #region The object of canvas\n    smallCanvas;\n    bigCanvas;\n    // #endregion\n    // #region CDK\n    overlayRef;\n    portal;\n    // #endregion\n    signDataHistory = [];\n    fullScreenWidth;\n    fullScreenHeight;\n    _isEmpty = true;\n    isFullScreen = false;\n    sectionHeight;\n    get activePad() {\n        return this.isFullScreen ? this.bigPad : this.smallPad;\n    }\n    options = {};\n    beginSign = new EventEmitter();\n    endSign = new EventEmitter();\n    fullScreenTpl;\n    nspSmall;\n    nspBig;\n    fullScreen() {\n        this.portal = new TemplatePortal(this.fullScreenTpl, this.viewContainerRef);\n        this.overlayRef = this.overlay.create({\n            positionStrategy: this.overlay.position().global(),\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            height: '100%',\n            width: '100%'\n        });\n        this.overlayRef.attach(this.portal);\n        setTimeout(() => {\n            this.initBigPad();\n            // #region Copy miniScreen's content to fullScreen\n            const { width: miniScreenWidth, height: miniScreenHeight } = this.options;\n            const ctx = this.bigCanvas.getContext('2d');\n            ctx.save();\n            ctx.translate(this.fullScreenWidth, 0);\n            ctx.rotate((90 * Math.PI) / 180);\n            ctx.drawImage(this.smallCanvas, 0, 0, miniScreenWidth, miniScreenHeight, 0, 0, this.fullScreenHeight, this.fullScreenWidth);\n            ctx.restore();\n            // #endregion\n        }, 0);\n        this.isFullScreen = true;\n    }\n    miniScreen() {\n        this.smallPad.clear();\n        // #region Copy fullScreen's content to miniScreen\n        const { width: miniScreenWidth, height: miniScreenHeight } = this.options;\n        const widthScale = miniScreenWidth / this.fullScreenHeight;\n        const heightScale = miniScreenHeight / this.fullScreenWidth;\n        const ctx = this.smallCanvas.getContext('2d');\n        ctx.save();\n        ctx.translate(0, miniScreenHeight);\n        ctx.rotate((-90 * Math.PI) / 180);\n        ctx.drawImage(this.bigCanvas, 0, 0, this.fullScreenWidth, this.fullScreenHeight, 0, 0, this.fullScreenWidth * widthScale, this.fullScreenHeight * heightScale);\n        ctx.restore();\n        // #endregion\n        this.overlayRef.dispose();\n        this.bigCanvas = null;\n        this.bigPad = null;\n        this.isFullScreen = false;\n    }\n    /** Returns signature image as an array of point groups */\n    toData() {\n        return this.activePad.toData();\n    }\n    /** Draws signature image from an array of point groups */\n    fromData(pointGroups) {\n        this.activePad.fromData(pointGroups);\n    }\n    toDataURL(type) {\n        switch (type) {\n            case 'image/jpeg':\n                return this.activePad.toDataURL('image/jpeg');\n            case 'image/svg+xml':\n                return this.activePad.toDataURL('image/svg+xml');\n            default:\n                return this.activePad.toDataURL();\n        }\n    }\n    fromDataURL(dataUrl, options, callback) {\n        this.activePad.fromDataURL(dataUrl, options, callback);\n    }\n    revert() {\n        this.signDataHistory.pop();\n        this.fromData(this.signDataHistory);\n        if (this.signDataHistory.length === 0) {\n            this.setEmpty();\n        }\n    }\n    // Clears the canvas\n    clear() {\n        this.setEmpty();\n        this.signDataHistory = [];\n        this.activePad.clear();\n    }\n    /** Return true if canvas is empty, otherwise return false */\n    isEmpty() {\n        return this._isEmpty;\n    }\n    /** Set canvas's state as dirty */\n    setDirty() {\n        this._isEmpty = false;\n    }\n    /** Set canvas's state as empty */\n    setEmpty() {\n        this._isEmpty = true;\n    }\n    getContext() {\n        return this.isFullScreen ? this.bigCanvas.getContext('2d') : this.smallCanvas.getContext('2d');\n    }\n    initBigPad() {\n        this.bigCanvas = this.nspBig.nativeElement; //document.querySelector('#nsp-big');\n        const fullScreenOptions = JSON.parse(JSON.stringify(this.options));\n        // Calculate the fullScreen pad's size\n        this.fullScreenWidth = document.documentElement.clientWidth;\n        const { width: miniScreenWidth, height: miniScreenHeight } = this.options;\n        this.fullScreenHeight = (this.fullScreenWidth * miniScreenWidth) / miniScreenHeight;\n        // Calculate section size\n        const viewHeight = document.documentElement.clientHeight;\n        const space = viewHeight - this.fullScreenHeight;\n        this.sectionHeight = space / 2;\n        // Init pad\n        fullScreenOptions.width = this.fullScreenWidth;\n        fullScreenOptions.height = this.fullScreenHeight;\n        const { css } = fullScreenOptions;\n        this.bigCanvas.width = this.fullScreenWidth;\n        this.bigCanvas.height = this.fullScreenHeight;\n        for (const key in css) {\n            if (Object.prototype.hasOwnProperty.call(css, key)) {\n                const value = css[key];\n                this.renderer2.setStyle(this.bigCanvas, key, value);\n            }\n        }\n        this.bigPad = new SignaturePad(this.bigCanvas, fullScreenOptions);\n        this.bigPad.onBegin = this._onBegin.bind(this);\n        this.bigPad.onEnd = this._onEnd.bind(this);\n    }\n    initSmallPad() {\n        this.smallCanvas = this.nspSmall.nativeElement; //document.querySelector('#nsp-small');\n        const { width, height, css } = this.options;\n        this.options.width = width ? width : 300;\n        this.options.height = height ? height : 150;\n        this.smallCanvas.width = this.options.width;\n        this.smallCanvas.height = this.options.height;\n        for (const key in css) {\n            if (Object.prototype.hasOwnProperty.call(css, key)) {\n                const value = css[key];\n                this.renderer2.setStyle(this.smallCanvas, key, value);\n            }\n        }\n        this.smallPad = new SignaturePad(this.smallCanvas, this.options);\n        this.smallPad.onBegin = this._onBegin.bind(this);\n        this.smallPad.onEnd = this._onEnd.bind(this);\n    }\n    _onBegin() {\n        this.setDirty(); // When user draws, set state as dirty\n        this.beginSign.emit();\n    }\n    _onEnd() {\n        this.signDataHistory = this.toData();\n        this.endSign.emit();\n    }\n    setPadAttribute(key, value) {\n        if (this.bigPad) {\n            this.bigPad[key] = value;\n        }\n        this.smallPad[key] = value;\n    }\n    constructor(renderer2, overlay, viewContainerRef) {\n        this.renderer2 = renderer2;\n        this.overlay = overlay;\n        this.viewContainerRef = viewContainerRef;\n    }\n    ngAfterViewInit() {\n        this.initSmallPad();\n    }\n    ngOnChanges(changes) {\n        if (changes.options.firstChange) {\n            return;\n        }\n        const { dotSize, minWidth, maxWidth, throttle, minDistance, backgroundColor, penColor, velocityFilterWeight, width, height, css } = changes.options.currentValue;\n        if (dotSize) {\n            this.setPadAttribute('dotSize', dotSize);\n        }\n        if (minWidth) {\n            this.setPadAttribute('minWidth', minWidth);\n        }\n        if (maxWidth) {\n            this.setPadAttribute('maxWidth', maxWidth);\n        }\n        if (throttle) {\n            this.setPadAttribute('throttle', throttle);\n        }\n        if (minDistance) {\n            this.setPadAttribute('minDistance', minDistance);\n        }\n        if (backgroundColor) {\n            this.setPadAttribute('backgroundColor', backgroundColor);\n        }\n        if (penColor) {\n            this.setPadAttribute('penColor', penColor);\n        }\n        if (velocityFilterWeight) {\n            this.setPadAttribute('velocityFilterWeight', velocityFilterWeight);\n        }\n        if (width || height) {\n            const { width: previousWidth, height: previousHeight } = changes.options.previousValue;\n            const data = this.smallPad.toDataURL();\n            const image = new Image();\n            image.src = data;\n            image.onload = () => {\n                this.initSmallPad();\n                const ctx = this.smallCanvas.getContext('2d');\n                ctx.drawImage(image, 0, 0, previousWidth, previousHeight, 0, 0, width, height);\n            };\n        }\n        if (css) {\n            if (this.bigCanvas) {\n                for (const key in css) {\n                    if (Object.prototype.hasOwnProperty.call(css, key)) {\n                        const value = css[key];\n                        this.renderer2.setStyle(this.bigCanvas, key, value);\n                    }\n                }\n            }\n            if (this.smallCanvas) {\n                for (const key in css) {\n                    if (Object.prototype.hasOwnProperty.call(css, key)) {\n                        const value = css[key];\n                        this.renderer2.setStyle(this.smallCanvas, key, value);\n                    }\n                }\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSignaturePadComponent, deps: [{ token: i0.Renderer2 }, { token: i1.Overlay }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.0.2\", type: NgxSignaturePadComponent, selector: \"ngx-signature-pad\", inputs: { options: \"options\" }, outputs: { beginSign: \"beginSign\", endSign: \"endSign\" }, viewQueries: [{ propertyName: \"fullScreenTpl\", first: true, predicate: [\"fullScreenTpl\"], descendants: true }, { propertyName: \"nspSmall\", first: true, predicate: [\"nspSmall\"], descendants: true }, { propertyName: \"nspBig\", first: true, predicate: [\"nspBig\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<canvas #nspSmall></canvas>\\n\\n<ng-template #fullScreenTpl>\\n  <div class=\\\"nsp-container\\\">\\n    <div class=\\\"section left\\\" style=\\\"width: 100%;\\\" [ngStyle]=\\\"{'height': sectionHeight + 'px'}\\\"></div>\\n    <canvas #nspBig></canvas>\\n    <div class=\\\"section right\\\" style=\\\"width: 100%;\\\" [ngStyle]=\\\"{'height': sectionHeight + 'px'}\\\"></div>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\", styles: [\".nsp-container{display:flex;flex-direction:column;position:fixed;left:0;top:0;width:100%;height:100vh;background:#fff}.nsp-container .section{flex:1}.nsp-container .section.left{border-bottom:2px dashed #dedee5}.nsp-container .section.right{border-top:2px dashed #dedee5}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSignaturePadComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-signature-pad', template: \"<canvas #nspSmall></canvas>\\n\\n<ng-template #fullScreenTpl>\\n  <div class=\\\"nsp-container\\\">\\n    <div class=\\\"section left\\\" style=\\\"width: 100%;\\\" [ngStyle]=\\\"{'height': sectionHeight + 'px'}\\\"></div>\\n    <canvas #nspBig></canvas>\\n    <div class=\\\"section right\\\" style=\\\"width: 100%;\\\" [ngStyle]=\\\"{'height': sectionHeight + 'px'}\\\"></div>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\", styles: [\".nsp-container{display:flex;flex-direction:column;position:fixed;left:0;top:0;width:100%;height:100vh;background:#fff}.nsp-container .section{flex:1}.nsp-container .section.left{border-bottom:2px dashed #dedee5}.nsp-container .section.right{border-top:2px dashed #dedee5}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1.Overlay }, { type: i0.ViewContainerRef }]; }, propDecorators: { options: [{\n                type: Input\n            }], beginSign: [{\n                type: Output\n            }], endSign: [{\n                type: Output\n            }], fullScreenTpl: [{\n                type: ViewChild,\n                args: ['fullScreenTpl']\n            }], nspSmall: [{\n                type: ViewChild,\n                args: ['nspSmall', { static: false }]\n            }], nspBig: [{\n                type: ViewChild,\n                args: ['nspBig', { static: false }]\n            }] } });\n\nclass NgxSignaturePadModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSignaturePadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSignaturePadModule, declarations: [NgxSignaturePadComponent], imports: [CommonModule, OverlayModule], exports: [NgxSignaturePadComponent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSignaturePadModule, imports: [CommonModule, OverlayModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.2\", ngImport: i0, type: NgxSignaturePadModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule],\n                    declarations: [NgxSignaturePadComponent],\n                    exports: [NgxSignaturePadComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-signature-pad\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxSignaturePadComponent, NgxSignaturePadModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}