import { __decorate } from "tslib";
import { Component, Input, ElementRef, Renderer2 } from '@angular/core';
import { FBMLAttribute, FBMLComponent } from '../fbml-component';
/**
 * @name Send Button
 * @shortdesc Send button component
 * @fbdoc https://developers.facebook.com/docs/plugins/send-button
 * @description
 * The Send button lets people privately send content on your site to one or more friends in a Facebook message.
 * @usage
 * ```html
 * <fb-send href="https://github.com/zyra/ngx-facebook-sdk/"></fb-send>
 * ```
 */
let FBSendComponent = class FBSendComponent extends FBMLComponent {
    constructor(el, rnd) {
        super(el, rnd, 'fb-send');
        /**
         * The absolute URL of the page that will be sent. Defaults to the current URL.
         */
        this.href = window.location.href;
    }
};
FBSendComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    FBMLAttribute
], FBSendComponent.prototype, "colorScheme", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBSendComponent.prototype, "href", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBSendComponent.prototype, "kidDirectedSite", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBSendComponent.prototype, "ref", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBSendComponent.prototype, "size", void 0);
FBSendComponent = __decorate([
    Component({
        selector: 'fb-send',
        template: ''
    })
], FBSendComponent);
export { FBSendComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmItc2VuZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mYWNlYm9vay8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZmItc2VuZC9mYi1zZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakU7Ozs7Ozs7Ozs7R0FVRztBQUtILElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWdCLFNBQVEsYUFBYTtJQXFDaEQsWUFDRSxFQUFjLEVBQ2QsR0FBYztRQUVkLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBaEM1Qjs7V0FFRztRQUdILFNBQUksR0FBVyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztJQTRCcEMsQ0FBQztDQUVGLENBQUE7O1lBTk8sVUFBVTtZQUNULFNBQVM7O0FBaENoQjtJQUZDLEtBQUssRUFBRTtJQUNQLGFBQWE7b0RBQ007QUFPcEI7SUFGQyxLQUFLLEVBQUU7SUFDUCxhQUFhOzZDQUNzQjtBQU9wQztJQUZDLEtBQUssRUFBRTtJQUNQLGFBQWE7d0RBQ1c7QUFPekI7SUFGQyxLQUFLLEVBQUU7SUFDUCxhQUFhOzRDQUNGO0FBT1o7SUFGQyxLQUFLLEVBQUU7SUFDUCxhQUFhOzZDQUNEO0FBbkNGLGVBQWU7SUFKM0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLFNBQVM7UUFDbkIsUUFBUSxFQUFFLEVBQUU7S0FDYixDQUFDO0dBQ1csZUFBZSxDQTRDM0I7U0E1Q1ksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRkJNTEF0dHJpYnV0ZSwgRkJNTENvbXBvbmVudCB9IGZyb20gJy4uL2ZibWwtY29tcG9uZW50JztcblxuLyoqXG4gKiBAbmFtZSBTZW5kIEJ1dHRvblxuICogQHNob3J0ZGVzYyBTZW5kIGJ1dHRvbiBjb21wb25lbnRcbiAqIEBmYmRvYyBodHRwczovL2RldmVsb3BlcnMuZmFjZWJvb2suY29tL2RvY3MvcGx1Z2lucy9zZW5kLWJ1dHRvblxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgU2VuZCBidXR0b24gbGV0cyBwZW9wbGUgcHJpdmF0ZWx5IHNlbmQgY29udGVudCBvbiB5b3VyIHNpdGUgdG8gb25lIG9yIG1vcmUgZnJpZW5kcyBpbiBhIEZhY2Vib29rIG1lc3NhZ2UuXG4gKiBAdXNhZ2VcbiAqIGBgYGh0bWxcbiAqIDxmYi1zZW5kIGhyZWY9XCJodHRwczovL2dpdGh1Yi5jb20venlyYS9uZ3gtZmFjZWJvb2stc2RrL1wiPjwvZmItc2VuZD5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmYi1zZW5kJyxcbiAgdGVtcGxhdGU6ICcnXG59KVxuZXhwb3J0IGNsYXNzIEZCU2VuZENvbXBvbmVudCBleHRlbmRzIEZCTUxDb21wb25lbnQge1xuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igc2NoZW1lIHVzZWQgYnkgdGhlIHBsdWdpbi4gQ2FuIGJlIFwibGlnaHRcIiBvciBcImRhcmtcIi4gRGVmYXVsdHMgdG8gbGlnaHQuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBjb2xvclNjaGVtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgYWJzb2x1dGUgVVJMIG9mIHRoZSBwYWdlIHRoYXQgd2lsbCBiZSBzZW50LiBEZWZhdWx0cyB0byB0aGUgY3VycmVudCBVUkwuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBocmVmOiBzdHJpbmcgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcblxuICAvKipcbiAgICogSWYgeW91ciB3ZWIgc2l0ZSBvciBvbmxpbmUgc2VydmljZSwgb3IgYSBwb3J0aW9uIG9mIHlvdXIgc2VydmljZSwgaXMgZGlyZWN0ZWQgdG8gY2hpbGRyZW4gdW5kZXIgMTMgeW91IG11c3QgZW5hYmxlIHRoaXMuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBraWREaXJlY3RlZFNpdGU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEEgbGFiZWwgZm9yIHRyYWNraW5nIHJlZmVycmFscyB3aGljaCBtdXN0IGJlIGxlc3MgdGhhbiA1MCBjaGFyYWN0ZXJzLCBhbmQgY2FuIGNvbnRhaW4gYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgYW5kIHNvbWUgcHVuY3R1YXRpb24gKGN1cnJlbnRseSArLz0tLjpfKS5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIHJlZjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBidXR0b24uIERlZmF1bHRzIHRvIHNtYWxsLlxuICAgKi9cbiAgQElucHV0KClcbiAgQEZCTUxBdHRyaWJ1dGVcbiAgc2l6ZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsOiBFbGVtZW50UmVmLFxuICAgIHJuZDogUmVuZGVyZXIyXG4gICkge1xuICAgIHN1cGVyKGVsLCBybmQsICdmYi1zZW5kJyk7XG4gIH1cblxufVxuIl19