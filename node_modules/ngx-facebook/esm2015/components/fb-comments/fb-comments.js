import { __decorate } from "tslib";
import { Component, Input, ElementRef, Renderer2 } from '@angular/core';
import { FBMLAttribute, FBMLComponent } from '../fbml-component';
/**
 * @name Comments
 * @shortdesc Comments component
 * @fbdoc https://developers.facebook.com/docs/plugins/comments
 * @description
 * The comments plugin lets people comment on content on your site using their Facebook account.
 * People can choose to share their comment activity with their friends (and friends of their friends) on Facebook as well.
 * The comments plugin also includes built-in moderation tools and social relevance ranking.
 *
 * @usage
 * ```html
 * <fb-comments></fb-comments>
 * ```
 */
let FBCommentsComponent = class FBCommentsComponent extends FBMLComponent {
    constructor(el, rnd) {
        super(el, rnd, 'fb-comments');
        /**
         * The absolute URL that comments posted in the plugin will be permanently associated with.
         * All stories shared on Facebook about comments posted using the comments plugin will link to this URL.
         * Defaults to current URL.
         */
        this.href = window.location.href;
    }
};
FBCommentsComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    FBMLAttribute
], FBCommentsComponent.prototype, "colorscheme", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBCommentsComponent.prototype, "href", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBCommentsComponent.prototype, "mobile", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBCommentsComponent.prototype, "numposts", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBCommentsComponent.prototype, "orderBy", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBCommentsComponent.prototype, "width", void 0);
FBCommentsComponent = __decorate([
    Component({
        selector: 'fb-comments',
        template: ''
    })
], FBCommentsComponent);
export { FBCommentsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmItY29tbWVudHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZmFjZWJvb2svIiwic291cmNlcyI6WyJjb21wb25lbnRzL2ZiLWNvbW1lbnRzL2ZiLWNvbW1lbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakU7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUtILElBQWEsbUJBQW1CLEdBQWhDLE1BQWEsbUJBQW9CLFNBQVEsYUFBYTtJQWtEcEQsWUFDRSxFQUFjLEVBQ2QsR0FBYztRQUVkLEtBQUssQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBN0NoQzs7OztXQUlHO1FBR0gsU0FBSSxHQUFXLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO0lBdUNwQyxDQUFDO0NBRUYsQ0FBQTs7WUFOTyxVQUFVO1lBQ1QsU0FBUzs7QUE3Q2hCO0lBRkMsS0FBSyxFQUFFO0lBQ1AsYUFBYTt3REFDTTtBQVNwQjtJQUZDLEtBQUssRUFBRTtJQUNQLGFBQWE7aURBQ3NCO0FBT3BDO0lBRkMsS0FBSyxFQUFFO0lBQ1AsYUFBYTttREFDRTtBQU9oQjtJQUZDLEtBQUssRUFBRTtJQUNQLGFBQWE7cURBQ0c7QUFPakI7SUFGQyxLQUFLLEVBQUU7SUFDUCxhQUFhO29EQUNFO0FBV2hCO0lBRkMsS0FBSyxFQUFFO0lBQ1AsYUFBYTtrREFDQTtBQWhESCxtQkFBbUI7SUFKL0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGFBQWE7UUFDdkIsUUFBUSxFQUFFLEVBQUU7S0FDYixDQUFDO0dBQ1csbUJBQW1CLENBeUQvQjtTQXpEWSxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZCTUxBdHRyaWJ1dGUsIEZCTUxDb21wb25lbnQgfSBmcm9tICcuLi9mYm1sLWNvbXBvbmVudCc7XG5cbi8qKlxuICogQG5hbWUgQ29tbWVudHNcbiAqIEBzaG9ydGRlc2MgQ29tbWVudHMgY29tcG9uZW50XG4gKiBAZmJkb2MgaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9kb2NzL3BsdWdpbnMvY29tbWVudHNcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGNvbW1lbnRzIHBsdWdpbiBsZXRzIHBlb3BsZSBjb21tZW50IG9uIGNvbnRlbnQgb24geW91ciBzaXRlIHVzaW5nIHRoZWlyIEZhY2Vib29rIGFjY291bnQuXG4gKiBQZW9wbGUgY2FuIGNob29zZSB0byBzaGFyZSB0aGVpciBjb21tZW50IGFjdGl2aXR5IHdpdGggdGhlaXIgZnJpZW5kcyAoYW5kIGZyaWVuZHMgb2YgdGhlaXIgZnJpZW5kcykgb24gRmFjZWJvb2sgYXMgd2VsbC5cbiAqIFRoZSBjb21tZW50cyBwbHVnaW4gYWxzbyBpbmNsdWRlcyBidWlsdC1pbiBtb2RlcmF0aW9uIHRvb2xzIGFuZCBzb2NpYWwgcmVsZXZhbmNlIHJhbmtpbmcuXG4gKlxuICogQHVzYWdlXG4gKiBgYGBodG1sXG4gKiA8ZmItY29tbWVudHM+PC9mYi1jb21tZW50cz5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmYi1jb21tZW50cycsXG4gIHRlbXBsYXRlOiAnJ1xufSlcbmV4cG9ydCBjbGFzcyBGQkNvbW1lbnRzQ29tcG9uZW50IGV4dGVuZHMgRkJNTENvbXBvbmVudCB7XG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBzY2hlbWUgdXNlZCBieSB0aGUgY29tbWVudHMgcGx1Z2luLiBDYW4gYmUgYGxpZ2h0YCBvciBgZGFya2AuIERlZmF1bHRzIHRvIGBsaWdodGAuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBjb2xvcnNjaGVtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgYWJzb2x1dGUgVVJMIHRoYXQgY29tbWVudHMgcG9zdGVkIGluIHRoZSBwbHVnaW4gd2lsbCBiZSBwZXJtYW5lbnRseSBhc3NvY2lhdGVkIHdpdGguXG4gICAqIEFsbCBzdG9yaWVzIHNoYXJlZCBvbiBGYWNlYm9vayBhYm91dCBjb21tZW50cyBwb3N0ZWQgdXNpbmcgdGhlIGNvbW1lbnRzIHBsdWdpbiB3aWxsIGxpbmsgdG8gdGhpcyBVUkwuXG4gICAqIERlZmF1bHRzIHRvIGN1cnJlbnQgVVJMLlxuICAgKi9cbiAgQElucHV0KClcbiAgQEZCTUxBdHRyaWJ1dGVcbiAgaHJlZjogc3RyaW5nID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5cbiAgLyoqXG4gICAqIEEgYm9vbGVhbiB2YWx1ZSB0aGF0IHNwZWNpZmllcyB3aGV0aGVyIHRvIHNob3cgdGhlIG1vYmlsZS1vcHRpbWl6ZWQgdmVyc2lvbiBvciBub3QuIElmIG5vIHZhbHVlIGlzIGdpdmVuLCBpdCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgZGV0ZWN0ZWQuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBtb2JpbGU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgY29tbWVudHMgdG8gc2hvdyBieSBkZWZhdWx0LiBUaGUgbWluaW11bSB2YWx1ZSBpcyBgMWAuIERlZmF1bHRzIHRvIGAxMGAuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBudW1wb3N0czogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgb3JkZXIgdG8gdXNlIHdoZW4gZGlzcGxheWluZyBjb21tZW50cy4gQ2FuIGJlIGBzb2NpYWxgLCBgcmV2ZXJzZV90aW1lYCwgb3IgYHRpbWVgLiBUaGUgZGlmZmVyZW50IG9yZGVyIHR5cGVzIGFyZSBleHBsYWluZWQgW2luIHRoZSBGQVFdKGh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vZG9jcy9wbHVnaW5zL2NvbW1lbnRzI2ZhcW9yZGVyKS4gRGVmYXVsdHMgdG8gYHNvY2lhbGBcbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIG9yZGVyQnk6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBjb21tZW50cyBwbHVnaW4gb24gdGhlIHdlYnBhZ2UuXG4gICAqIFRoaXMgY2FuIGJlIGVpdGhlciBhIHBpeGVsIHZhbHVlIG9yIGEgcGVyY2VudGFnZSAoc3VjaCBhcyAxMDAlKSBmb3IgZmx1aWQgd2lkdGguXG4gICAqIFRoZSBtb2JpbGUgdmVyc2lvbiBvZiB0aGUgY29tbWVudHMgcGx1Z2luIGlnbm9yZXMgdGhlIHdpZHRoIHBhcmFtZXRlciBhbmQgaW5zdGVhZCBoYXMgYSBmbHVpZCB3aWR0aCBvZiAxMDAlLlxuICAgKiBUaGUgbWluaW11bSB3aWR0aCBzdXBwb3J0ZWQgYnkgdGhlIGNvbW1lbnRzIHBsdWdpbiBpcyAzMjBweC5cbiAgICogRGVmYXVsdHMgdG8gYDU1MHB4YC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIHdpZHRoOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZWw6IEVsZW1lbnRSZWYsXG4gICAgcm5kOiBSZW5kZXJlcjJcbiAgKSB7XG4gICAgc3VwZXIoZWwsIHJuZCwgJ2ZiLWNvbW1lbnRzJyk7XG4gIH1cblxufVxuIl19