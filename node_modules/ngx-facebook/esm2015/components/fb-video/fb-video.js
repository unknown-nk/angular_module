import { __decorate } from "tslib";
import { Component, Input, Output, ElementRef, Renderer2, OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { FBMLAttribute, FBMLComponent, FBMLInstanceMethod } from '../fbml-component';
/**
 * @name Embedded Video
 * @shortdesc Component to embed Facebook videos
 * @fbdoc https://developers.facebook.com/docs/plugins/embedded-video-player
 * @description Component to embed Facebook videos and control them.
 * @usage
 * ```html
 * <!-- basic usage -->
 * <fb-video href="https://www.facebook.com/facebook/videos/10153231379946729/"></fb-video>
 *
 * <!-- event emitters -->
 * <fb-video href="https://www.facebook.com/facebook/videos/10153231379946729/" (paused)="onVideoPaused($event)"></fb-video>
 * ```
 *
 * To manually interact with the video player, fetch it using `ViewChild`.
 *
 * ```ts
 * import { Component, ViewChild } from '@angular/core';
 * import { FBVideoComponent } from 'ngx-facebook-sdk';
 *
 * @Component(...)
 * export class MyComponent {
 *
 *   @ViewChild(FBVideoComponent) video: FBVideoComponent;
 *
 *   ngAfterViewInit() {
 *     this.video.play();
 *     this.video.pause();
 *     this.video.getVolume();
 *   }
 *
 * }
 *
 * ```
 */
let FBVideoComponent = class FBVideoComponent extends FBMLComponent {
    constructor(el, rnd) {
        super(el, rnd, 'fb-video');
        /**
         * Fired when video starts to play.
         */
        this.startedPlaying = new EventEmitter();
        /**
         * Fired when video pauses.
         */
        this.paused = new EventEmitter();
        /**
         *
         Fired when video finishes playing.
         */
        this.finishedPlaying = new EventEmitter();
        /**
         * Fired when video starts to buffer.
         */
        this.startedBuffering = new EventEmitter();
        /**
         * Fired when video recovers from buffering.
         */
        this.finishedBuffering = new EventEmitter();
        /**
         * Fired when an error occurs on the video.
         */
        this.error = new EventEmitter();
        this._listeners = [];
        this.nativeElement.id = this._id = 'video-' + String(Math.floor((Math.random() * 10000) + 1));
    }
    /**
     * @hidden
     */
    ngOnInit() {
        FB.Event.subscribe('xfbml.ready', (msg) => {
            if (msg.type === 'video' && msg.id === this._id) {
                this._instance = msg.instance;
                this._listeners.push(this._instance.subscribe('startedPlaying', (e) => this.startedPlaying.emit(e)), this._instance.subscribe('paused', (e) => this.paused.emit(e)), this._instance.subscribe('finishedPlaying', (e) => this.finishedPlaying.emit(e)), this._instance.subscribe('startedBuffering', (e) => this.startedBuffering.emit(e)), this._instance.subscribe('finishedBuffering', (e) => this.finishedBuffering.emit(e)), this._instance.subscribe('error', (e) => this.error.emit(e)));
            }
        });
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this._listeners.forEach(l => {
            if (typeof l.release === 'function') {
                l.release();
            }
        });
    }
    /**
     * Plays the video.
     */
    play() { }
    /**
     * Pauses the video.
     */
    pause() { }
    /**
     * Seeks to specified position.
     * @param seconds {number}
     */
    seek(seconds) { }
    /**
     * Mute the video.
     */
    mute() { }
    /**
     * Unmute the video.
     */
    unmute() { }
    /**
     * Returns true if video is muted, false if not.
     */
    isMuted() { return; }
    /**
     * Set the volume
     * @param volume
     */
    setVolume(volume) { }
    /**
     * Get the volume
     */
    getVolume() { return; }
    /**
     * Returns the current video time position in seconds
     */
    getCurrentPosition() { }
    /**
     * Returns the video duration in seconds
     */
    getDuration() { }
};
FBVideoComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    FBMLAttribute
], FBVideoComponent.prototype, "href", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBVideoComponent.prototype, "allowfullscreen", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBVideoComponent.prototype, "autoplay", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBVideoComponent.prototype, "width", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBVideoComponent.prototype, "showText", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBVideoComponent.prototype, "showCaptions", void 0);
__decorate([
    Output()
], FBVideoComponent.prototype, "startedPlaying", void 0);
__decorate([
    Output()
], FBVideoComponent.prototype, "paused", void 0);
__decorate([
    Output()
], FBVideoComponent.prototype, "finishedPlaying", void 0);
__decorate([
    Output()
], FBVideoComponent.prototype, "startedBuffering", void 0);
__decorate([
    Output()
], FBVideoComponent.prototype, "finishedBuffering", void 0);
__decorate([
    Output()
], FBVideoComponent.prototype, "error", void 0);
__decorate([
    FBMLInstanceMethod
], FBVideoComponent.prototype, "play", null);
__decorate([
    FBMLInstanceMethod
], FBVideoComponent.prototype, "pause", null);
__decorate([
    FBMLInstanceMethod
], FBVideoComponent.prototype, "seek", null);
__decorate([
    FBMLInstanceMethod
], FBVideoComponent.prototype, "mute", null);
__decorate([
    FBMLInstanceMethod
], FBVideoComponent.prototype, "unmute", null);
__decorate([
    FBMLInstanceMethod
], FBVideoComponent.prototype, "isMuted", null);
__decorate([
    FBMLInstanceMethod
], FBVideoComponent.prototype, "setVolume", null);
__decorate([
    FBMLInstanceMethod
], FBVideoComponent.prototype, "getVolume", null);
__decorate([
    FBMLInstanceMethod
], FBVideoComponent.prototype, "getCurrentPosition", null);
__decorate([
    FBMLInstanceMethod
], FBVideoComponent.prototype, "getDuration", null);
FBVideoComponent = __decorate([
    Component({
        selector: 'fb-video',
        template: ''
    })
], FBVideoComponent);
export { FBVideoComponent };
//# sourceMappingURL=data:application/json;base64,