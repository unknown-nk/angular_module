import { __decorate } from "tslib";
import { Component, Input, ElementRef, Renderer2 } from '@angular/core';
import { FBMLAttribute, FBMLComponent } from '../fbml-component';
/**
 * @name Follow Button
 * @shortdesc Follow button component
 * @fbdoc https://developers.facebook.com/docs/plugins/follow-button
 * @description The Follow button lets people subscribe to the public updates of others on Facebook.
 * @usage
 * ```html
 * <fb-follow href="https://www.facebook.com/zuck"></fb-follow>
 * ```
 */
let FBFollowComponent = class FBFollowComponent extends FBMLComponent {
    constructor(el, rnd) {
        super(el, rnd, 'fb-follow');
    }
};
FBFollowComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
__decorate([
    Input(),
    FBMLAttribute
], FBFollowComponent.prototype, "colorScheme", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBFollowComponent.prototype, "href", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBFollowComponent.prototype, "kidDirectedSite", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBFollowComponent.prototype, "layout", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBFollowComponent.prototype, "showFaces", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBFollowComponent.prototype, "size", void 0);
__decorate([
    Input(),
    FBMLAttribute
], FBFollowComponent.prototype, "width", void 0);
FBFollowComponent = __decorate([
    Component({
        selector: 'fb-follow',
        template: ''
    })
], FBFollowComponent);
export { FBFollowComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmItZm9sbG93LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZhY2Vib29rLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9mYi1mb2xsb3cvZmItZm9sbG93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakU7Ozs7Ozs7OztHQVNHO0FBS0gsSUFBYSxpQkFBaUIsR0FBOUIsTUFBYSxpQkFBa0IsU0FBUSxhQUFhO0lBb0RsRCxZQUNFLEVBQWMsRUFDZCxHQUFjO1FBRWQsS0FBSyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUVGLENBQUE7O1lBTk8sVUFBVTtZQUNULFNBQVM7O0FBL0NoQjtJQUZDLEtBQUssRUFBRTtJQUNQLGFBQWE7c0RBQ007QUFPcEI7SUFGQyxLQUFLLEVBQUU7SUFDUCxhQUFhOytDQUNEO0FBT2I7SUFGQyxLQUFLLEVBQUU7SUFDUCxhQUFhOzBEQUNXO0FBUXpCO0lBRkMsS0FBSyxFQUFFO0lBQ1AsYUFBYTtpREFDQztBQU9mO0lBRkMsS0FBSyxFQUFFO0lBQ1AsYUFBYTtvREFDSTtBQU9sQjtJQUZDLEtBQUssRUFBRTtJQUNQLGFBQWE7K0NBQ0Q7QUFPYjtJQUZDLEtBQUssRUFBRTtJQUNQLGFBQWE7Z0RBQ0E7QUFsREgsaUJBQWlCO0lBSjdCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxXQUFXO1FBQ3JCLFFBQVEsRUFBRSxFQUFFO0tBQ2IsQ0FBQztHQUNXLGlCQUFpQixDQTJEN0I7U0EzRFksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGQk1MQXR0cmlidXRlLCBGQk1MQ29tcG9uZW50IH0gZnJvbSAnLi4vZmJtbC1jb21wb25lbnQnO1xuXG4vKipcbiAqIEBuYW1lIEZvbGxvdyBCdXR0b25cbiAqIEBzaG9ydGRlc2MgRm9sbG93IGJ1dHRvbiBjb21wb25lbnRcbiAqIEBmYmRvYyBodHRwczovL2RldmVsb3BlcnMuZmFjZWJvb2suY29tL2RvY3MvcGx1Z2lucy9mb2xsb3ctYnV0dG9uXG4gKiBAZGVzY3JpcHRpb24gVGhlIEZvbGxvdyBidXR0b24gbGV0cyBwZW9wbGUgc3Vic2NyaWJlIHRvIHRoZSBwdWJsaWMgdXBkYXRlcyBvZiBvdGhlcnMgb24gRmFjZWJvb2suXG4gKiBAdXNhZ2VcbiAqIGBgYGh0bWxcbiAqIDxmYi1mb2xsb3cgaHJlZj1cImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS96dWNrXCI+PC9mYi1mb2xsb3c+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZmItZm9sbG93JyxcbiAgdGVtcGxhdGU6ICcnXG59KVxuZXhwb3J0IGNsYXNzIEZCRm9sbG93Q29tcG9uZW50IGV4dGVuZHMgRkJNTENvbXBvbmVudCB7XG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBzY2hlbWUgdXNlZCBieSB0aGUgcGx1Z2luLiBDYW4gYmUgYGxpZ2h0YCBvciBgZGFya2AuIERlZmF1bHRzIHRvIGBsaWdodGAuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBjb2xvclNjaGVtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgRmFjZWJvb2suY29tIHByb2ZpbGUgVVJMIG9mIHRoZSB1c2VyIHRvIGZvbGxvdy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIGhyZWY6IHN0cmluZztcblxuICAvKipcbiAgICogSWYgeW91ciB3ZWIgc2l0ZSBvciBvbmxpbmUgc2VydmljZSwgb3IgYSBwb3J0aW9uIG9mIHlvdXIgc2VydmljZSwgaXMgZGlyZWN0ZWQgdG8gY2hpbGRyZW4gdW5kZXIgMTMgeW91IG11c3QgZW5hYmxlIHRoaXMuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBraWREaXJlY3RlZFNpdGU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFNlbGVjdHMgb25lIG9mIHRoZSBkaWZmZXJlbnQgbGF5b3V0cyB0aGF0IGFyZSBhdmFpbGFibGUgZm9yIHRoZSBwbHVnaW4uIENhbiBiZSBvbmUgb2YgYHN0YW5kYXJkYCwgYGJ1dHRvbl9jb3VudGAsIG9yIGBib3hfY291bnRgLlxuICAgKiBEZWZhdWx0cyB0byBgc3RhbmRhcmRgLlxuICAgKi9cbiAgQElucHV0KClcbiAgQEZCTUxBdHRyaWJ1dGVcbiAgbGF5b3V0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNwZWNpZmllcyB3aGV0aGVyIHRvIGRpc3BsYXkgcHJvZmlsZSBwaG90b3MgYmVsb3cgdGhlIGJ1dHRvbi4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIHNob3dGYWNlczogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgYnV0dG9uIGlzIG9mZmVyZWQgaW4gMiBzaXplcyBpLmUuIGBsYXJnZWAgYW5kIGBzbWFsbGAuIERlZmF1bHRzIHRvIGBzbWFsbGAuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBzaXplOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgcGx1Z2luLiBUaGUgbGF5b3V0IHlvdSBjaG9vc2UgYWZmZWN0cyB0aGUgbWluaW11bSBhbmQgZGVmYXVsdCB3aWR0aHMgeW91IGNhbiB1c2UuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICB3aWR0aDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsOiBFbGVtZW50UmVmLFxuICAgIHJuZDogUmVuZGVyZXIyXG4gICkge1xuICAgIHN1cGVyKGVsLCBybmQsICdmYi1mb2xsb3cnKTtcbiAgfVxuXG59XG4iXX0=