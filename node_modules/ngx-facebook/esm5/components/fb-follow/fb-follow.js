import { __decorate, __extends } from "tslib";
import { Component, Input, ElementRef, Renderer2 } from '@angular/core';
import { FBMLAttribute, FBMLComponent } from '../fbml-component';
/**
 * @name Follow Button
 * @shortdesc Follow button component
 * @fbdoc https://developers.facebook.com/docs/plugins/follow-button
 * @description The Follow button lets people subscribe to the public updates of others on Facebook.
 * @usage
 * ```html
 * <fb-follow href="https://www.facebook.com/zuck"></fb-follow>
 * ```
 */
var FBFollowComponent = /** @class */ (function (_super) {
    __extends(FBFollowComponent, _super);
    function FBFollowComponent(el, rnd) {
        return _super.call(this, el, rnd, 'fb-follow') || this;
    }
    FBFollowComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        FBMLAttribute
    ], FBFollowComponent.prototype, "colorScheme", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBFollowComponent.prototype, "href", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBFollowComponent.prototype, "kidDirectedSite", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBFollowComponent.prototype, "layout", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBFollowComponent.prototype, "showFaces", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBFollowComponent.prototype, "size", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBFollowComponent.prototype, "width", void 0);
    FBFollowComponent = __decorate([
        Component({
            selector: 'fb-follow',
            template: ''
        })
    ], FBFollowComponent);
    return FBFollowComponent;
}(FBMLComponent));
export { FBFollowComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmItZm9sbG93LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWZhY2Vib29rLyIsInNvdXJjZXMiOlsiY29tcG9uZW50cy9mYi1mb2xsb3cvZmItZm9sbG93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakU7Ozs7Ozs7OztHQVNHO0FBS0g7SUFBdUMscUNBQWE7SUFvRGxELDJCQUNFLEVBQWMsRUFDZCxHQUFjO2VBRWQsa0JBQU0sRUFBRSxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUM7SUFDN0IsQ0FBQzs7Z0JBSkssVUFBVTtnQkFDVCxTQUFTOztJQS9DaEI7UUFGQyxLQUFLLEVBQUU7UUFDUCxhQUFhOzBEQUNNO0lBT3BCO1FBRkMsS0FBSyxFQUFFO1FBQ1AsYUFBYTttREFDRDtJQU9iO1FBRkMsS0FBSyxFQUFFO1FBQ1AsYUFBYTs4REFDVztJQVF6QjtRQUZDLEtBQUssRUFBRTtRQUNQLGFBQWE7cURBQ0M7SUFPZjtRQUZDLEtBQUssRUFBRTtRQUNQLGFBQWE7d0RBQ0k7SUFPbEI7UUFGQyxLQUFLLEVBQUU7UUFDUCxhQUFhO21EQUNEO0lBT2I7UUFGQyxLQUFLLEVBQUU7UUFDUCxhQUFhO29EQUNBO0lBbERILGlCQUFpQjtRQUo3QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsV0FBVztZQUNyQixRQUFRLEVBQUUsRUFBRTtTQUNiLENBQUM7T0FDVyxpQkFBaUIsQ0EyRDdCO0lBQUQsd0JBQUM7Q0FBQSxBQTNERCxDQUF1QyxhQUFhLEdBMkRuRDtTQTNEWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZCTUxBdHRyaWJ1dGUsIEZCTUxDb21wb25lbnQgfSBmcm9tICcuLi9mYm1sLWNvbXBvbmVudCc7XG5cbi8qKlxuICogQG5hbWUgRm9sbG93IEJ1dHRvblxuICogQHNob3J0ZGVzYyBGb2xsb3cgYnV0dG9uIGNvbXBvbmVudFxuICogQGZiZG9jIGh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vZG9jcy9wbHVnaW5zL2ZvbGxvdy1idXR0b25cbiAqIEBkZXNjcmlwdGlvbiBUaGUgRm9sbG93IGJ1dHRvbiBsZXRzIHBlb3BsZSBzdWJzY3JpYmUgdG8gdGhlIHB1YmxpYyB1cGRhdGVzIG9mIG90aGVycyBvbiBGYWNlYm9vay5cbiAqIEB1c2FnZVxuICogYGBgaHRtbFxuICogPGZiLWZvbGxvdyBocmVmPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3p1Y2tcIj48L2ZiLWZvbGxvdz5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmYi1mb2xsb3cnLFxuICB0ZW1wbGF0ZTogJydcbn0pXG5leHBvcnQgY2xhc3MgRkJGb2xsb3dDb21wb25lbnQgZXh0ZW5kcyBGQk1MQ29tcG9uZW50IHtcblxuICAvKipcbiAgICogVGhlIGNvbG9yIHNjaGVtZSB1c2VkIGJ5IHRoZSBwbHVnaW4uIENhbiBiZSBgbGlnaHRgIG9yIGBkYXJrYC4gRGVmYXVsdHMgdG8gYGxpZ2h0YC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIGNvbG9yU2NoZW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBGYWNlYm9vay5jb20gcHJvZmlsZSBVUkwgb2YgdGhlIHVzZXIgdG8gZm9sbG93LlxuICAgKi9cbiAgQElucHV0KClcbiAgQEZCTUxBdHRyaWJ1dGVcbiAgaHJlZjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBJZiB5b3VyIHdlYiBzaXRlIG9yIG9ubGluZSBzZXJ2aWNlLCBvciBhIHBvcnRpb24gb2YgeW91ciBzZXJ2aWNlLCBpcyBkaXJlY3RlZCB0byBjaGlsZHJlbiB1bmRlciAxMyB5b3UgbXVzdCBlbmFibGUgdGhpcy4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIGtpZERpcmVjdGVkU2l0ZTogYm9vbGVhbjtcblxuICAvKipcbiAgICogU2VsZWN0cyBvbmUgb2YgdGhlIGRpZmZlcmVudCBsYXlvdXRzIHRoYXQgYXJlIGF2YWlsYWJsZSBmb3IgdGhlIHBsdWdpbi4gQ2FuIGJlIG9uZSBvZiBgc3RhbmRhcmRgLCBgYnV0dG9uX2NvdW50YCwgb3IgYGJveF9jb3VudGAuXG4gICAqIERlZmF1bHRzIHRvIGBzdGFuZGFyZGAuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBsYXlvdXQ6IHN0cmluZztcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHdoZXRoZXIgdG8gZGlzcGxheSBwcm9maWxlIHBob3RvcyBiZWxvdyB0aGUgYnV0dG9uLiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuICAgKi9cbiAgQElucHV0KClcbiAgQEZCTUxBdHRyaWJ1dGVcbiAgc2hvd0ZhY2VzOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBidXR0b24gaXMgb2ZmZXJlZCBpbiAyIHNpemVzIGkuZS4gYGxhcmdlYCBhbmQgYHNtYWxsYC4gRGVmYXVsdHMgdG8gYHNtYWxsYC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIHNpemU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBwbHVnaW4uIFRoZSBsYXlvdXQgeW91IGNob29zZSBhZmZlY3RzIHRoZSBtaW5pbXVtIGFuZCBkZWZhdWx0IHdpZHRocyB5b3UgY2FuIHVzZS5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIHdpZHRoOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZWw6IEVsZW1lbnRSZWYsXG4gICAgcm5kOiBSZW5kZXJlcjJcbiAgKSB7XG4gICAgc3VwZXIoZWwsIHJuZCwgJ2ZiLWZvbGxvdycpO1xuICB9XG5cbn1cbiJdfQ==