import { __decorate, __extends } from "tslib";
import { Component, Input, ElementRef, Renderer2 } from '@angular/core';
import { FBMLAttribute, FBMLComponent } from '../fbml-component';
/**
 * @name Send Button
 * @shortdesc Send button component
 * @fbdoc https://developers.facebook.com/docs/plugins/send-button
 * @description
 * The Send button lets people privately send content on your site to one or more friends in a Facebook message.
 * @usage
 * ```html
 * <fb-send href="https://github.com/zyra/ngx-facebook-sdk/"></fb-send>
 * ```
 */
var FBSendComponent = /** @class */ (function (_super) {
    __extends(FBSendComponent, _super);
    function FBSendComponent(el, rnd) {
        var _this = _super.call(this, el, rnd, 'fb-send') || this;
        /**
         * The absolute URL of the page that will be sent. Defaults to the current URL.
         */
        _this.href = window.location.href;
        return _this;
    }
    FBSendComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        FBMLAttribute
    ], FBSendComponent.prototype, "colorScheme", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBSendComponent.prototype, "href", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBSendComponent.prototype, "kidDirectedSite", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBSendComponent.prototype, "ref", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBSendComponent.prototype, "size", void 0);
    FBSendComponent = __decorate([
        Component({
            selector: 'fb-send',
            template: ''
        })
    ], FBSendComponent);
    return FBSendComponent;
}(FBMLComponent));
export { FBSendComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmItc2VuZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1mYWNlYm9vay8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvZmItc2VuZC9mYi1zZW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakU7Ozs7Ozs7Ozs7R0FVRztBQUtIO0lBQXFDLG1DQUFhO0lBcUNoRCx5QkFDRSxFQUFjLEVBQ2QsR0FBYztRQUZoQixZQUlFLGtCQUFNLEVBQUUsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLFNBQzFCO1FBakNEOztXQUVHO1FBR0gsVUFBSSxHQUFXLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDOztJQTRCcEMsQ0FBQzs7Z0JBSkssVUFBVTtnQkFDVCxTQUFTOztJQWhDaEI7UUFGQyxLQUFLLEVBQUU7UUFDUCxhQUFhO3dEQUNNO0lBT3BCO1FBRkMsS0FBSyxFQUFFO1FBQ1AsYUFBYTtpREFDc0I7SUFPcEM7UUFGQyxLQUFLLEVBQUU7UUFDUCxhQUFhOzREQUNXO0lBT3pCO1FBRkMsS0FBSyxFQUFFO1FBQ1AsYUFBYTtnREFDRjtJQU9aO1FBRkMsS0FBSyxFQUFFO1FBQ1AsYUFBYTtpREFDRDtJQW5DRixlQUFlO1FBSjNCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxTQUFTO1lBQ25CLFFBQVEsRUFBRSxFQUFFO1NBQ2IsQ0FBQztPQUNXLGVBQWUsQ0E0QzNCO0lBQUQsc0JBQUM7Q0FBQSxBQTVDRCxDQUFxQyxhQUFhLEdBNENqRDtTQTVDWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGQk1MQXR0cmlidXRlLCBGQk1MQ29tcG9uZW50IH0gZnJvbSAnLi4vZmJtbC1jb21wb25lbnQnO1xuXG4vKipcbiAqIEBuYW1lIFNlbmQgQnV0dG9uXG4gKiBAc2hvcnRkZXNjIFNlbmQgYnV0dG9uIGNvbXBvbmVudFxuICogQGZiZG9jIGh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vZG9jcy9wbHVnaW5zL3NlbmQtYnV0dG9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBTZW5kIGJ1dHRvbiBsZXRzIHBlb3BsZSBwcml2YXRlbHkgc2VuZCBjb250ZW50IG9uIHlvdXIgc2l0ZSB0byBvbmUgb3IgbW9yZSBmcmllbmRzIGluIGEgRmFjZWJvb2sgbWVzc2FnZS5cbiAqIEB1c2FnZVxuICogYGBgaHRtbFxuICogPGZiLXNlbmQgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS96eXJhL25neC1mYWNlYm9vay1zZGsvXCI+PC9mYi1zZW5kPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2ZiLXNlbmQnLFxuICB0ZW1wbGF0ZTogJydcbn0pXG5leHBvcnQgY2xhc3MgRkJTZW5kQ29tcG9uZW50IGV4dGVuZHMgRkJNTENvbXBvbmVudCB7XG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBzY2hlbWUgdXNlZCBieSB0aGUgcGx1Z2luLiBDYW4gYmUgXCJsaWdodFwiIG9yIFwiZGFya1wiLiBEZWZhdWx0cyB0byBsaWdodC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIGNvbG9yU2NoZW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBhYnNvbHV0ZSBVUkwgb2YgdGhlIHBhZ2UgdGhhdCB3aWxsIGJlIHNlbnQuIERlZmF1bHRzIHRvIHRoZSBjdXJyZW50IFVSTC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIGhyZWY6IHN0cmluZyA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXG4gIC8qKlxuICAgKiBJZiB5b3VyIHdlYiBzaXRlIG9yIG9ubGluZSBzZXJ2aWNlLCBvciBhIHBvcnRpb24gb2YgeW91ciBzZXJ2aWNlLCBpcyBkaXJlY3RlZCB0byBjaGlsZHJlbiB1bmRlciAxMyB5b3UgbXVzdCBlbmFibGUgdGhpcy5cbiAgICovXG4gIEBJbnB1dCgpXG4gIEBGQk1MQXR0cmlidXRlXG4gIGtpZERpcmVjdGVkU2l0ZTogYm9vbGVhbjtcblxuICAvKipcbiAgICogQSBsYWJlbCBmb3IgdHJhY2tpbmcgcmVmZXJyYWxzIHdoaWNoIG11c3QgYmUgbGVzcyB0aGFuIDUwIGNoYXJhY3RlcnMsIGFuZCBjYW4gY29udGFpbiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycyBhbmQgc29tZSBwdW5jdHVhdGlvbiAoY3VycmVudGx5ICsvPS0uOl8pLlxuICAgKi9cbiAgQElucHV0KClcbiAgQEZCTUxBdHRyaWJ1dGVcbiAgcmVmOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIGJ1dHRvbi4gRGVmYXVsdHMgdG8gc21hbGwuXG4gICAqL1xuICBASW5wdXQoKVxuICBARkJNTEF0dHJpYnV0ZVxuICBzaXplOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZWw6IEVsZW1lbnRSZWYsXG4gICAgcm5kOiBSZW5kZXJlcjJcbiAgKSB7XG4gICAgc3VwZXIoZWwsIHJuZCwgJ2ZiLXNlbmQnKTtcbiAgfVxuXG59XG4iXX0=