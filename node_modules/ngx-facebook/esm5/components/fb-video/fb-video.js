import { __decorate, __extends } from "tslib";
import { Component, Input, Output, ElementRef, Renderer2, OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { FBMLAttribute, FBMLComponent, FBMLInstanceMethod } from '../fbml-component';
/**
 * @name Embedded Video
 * @shortdesc Component to embed Facebook videos
 * @fbdoc https://developers.facebook.com/docs/plugins/embedded-video-player
 * @description Component to embed Facebook videos and control them.
 * @usage
 * ```html
 * <!-- basic usage -->
 * <fb-video href="https://www.facebook.com/facebook/videos/10153231379946729/"></fb-video>
 *
 * <!-- event emitters -->
 * <fb-video href="https://www.facebook.com/facebook/videos/10153231379946729/" (paused)="onVideoPaused($event)"></fb-video>
 * ```
 *
 * To manually interact with the video player, fetch it using `ViewChild`.
 *
 * ```ts
 * import { Component, ViewChild } from '@angular/core';
 * import { FBVideoComponent } from 'ngx-facebook-sdk';
 *
 * @Component(...)
 * export class MyComponent {
 *
 *   @ViewChild(FBVideoComponent) video: FBVideoComponent;
 *
 *   ngAfterViewInit() {
 *     this.video.play();
 *     this.video.pause();
 *     this.video.getVolume();
 *   }
 *
 * }
 *
 * ```
 */
var FBVideoComponent = /** @class */ (function (_super) {
    __extends(FBVideoComponent, _super);
    function FBVideoComponent(el, rnd) {
        var _this = _super.call(this, el, rnd, 'fb-video') || this;
        /**
         * Fired when video starts to play.
         */
        _this.startedPlaying = new EventEmitter();
        /**
         * Fired when video pauses.
         */
        _this.paused = new EventEmitter();
        /**
         *
         Fired when video finishes playing.
         */
        _this.finishedPlaying = new EventEmitter();
        /**
         * Fired when video starts to buffer.
         */
        _this.startedBuffering = new EventEmitter();
        /**
         * Fired when video recovers from buffering.
         */
        _this.finishedBuffering = new EventEmitter();
        /**
         * Fired when an error occurs on the video.
         */
        _this.error = new EventEmitter();
        _this._listeners = [];
        _this.nativeElement.id = _this._id = 'video-' + String(Math.floor((Math.random() * 10000) + 1));
        return _this;
    }
    /**
     * @hidden
     */
    FBVideoComponent.prototype.ngOnInit = function () {
        var _this = this;
        FB.Event.subscribe('xfbml.ready', function (msg) {
            if (msg.type === 'video' && msg.id === _this._id) {
                _this._instance = msg.instance;
                _this._listeners.push(_this._instance.subscribe('startedPlaying', function (e) { return _this.startedPlaying.emit(e); }), _this._instance.subscribe('paused', function (e) { return _this.paused.emit(e); }), _this._instance.subscribe('finishedPlaying', function (e) { return _this.finishedPlaying.emit(e); }), _this._instance.subscribe('startedBuffering', function (e) { return _this.startedBuffering.emit(e); }), _this._instance.subscribe('finishedBuffering', function (e) { return _this.finishedBuffering.emit(e); }), _this._instance.subscribe('error', function (e) { return _this.error.emit(e); }));
            }
        });
    };
    /**
     * @hidden
     */
    FBVideoComponent.prototype.ngOnDestroy = function () {
        this._listeners.forEach(function (l) {
            if (typeof l.release === 'function') {
                l.release();
            }
        });
    };
    /**
     * Plays the video.
     */
    FBVideoComponent.prototype.play = function () { };
    /**
     * Pauses the video.
     */
    FBVideoComponent.prototype.pause = function () { };
    /**
     * Seeks to specified position.
     * @param seconds {number}
     */
    FBVideoComponent.prototype.seek = function (seconds) { };
    /**
     * Mute the video.
     */
    FBVideoComponent.prototype.mute = function () { };
    /**
     * Unmute the video.
     */
    FBVideoComponent.prototype.unmute = function () { };
    /**
     * Returns true if video is muted, false if not.
     */
    FBVideoComponent.prototype.isMuted = function () { return; };
    /**
     * Set the volume
     * @param volume
     */
    FBVideoComponent.prototype.setVolume = function (volume) { };
    /**
     * Get the volume
     */
    FBVideoComponent.prototype.getVolume = function () { return; };
    /**
     * Returns the current video time position in seconds
     */
    FBVideoComponent.prototype.getCurrentPosition = function () { };
    /**
     * Returns the video duration in seconds
     */
    FBVideoComponent.prototype.getDuration = function () { };
    FBVideoComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    __decorate([
        Input(),
        FBMLAttribute
    ], FBVideoComponent.prototype, "href", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBVideoComponent.prototype, "allowfullscreen", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBVideoComponent.prototype, "autoplay", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBVideoComponent.prototype, "width", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBVideoComponent.prototype, "showText", void 0);
    __decorate([
        Input(),
        FBMLAttribute
    ], FBVideoComponent.prototype, "showCaptions", void 0);
    __decorate([
        Output()
    ], FBVideoComponent.prototype, "startedPlaying", void 0);
    __decorate([
        Output()
    ], FBVideoComponent.prototype, "paused", void 0);
    __decorate([
        Output()
    ], FBVideoComponent.prototype, "finishedPlaying", void 0);
    __decorate([
        Output()
    ], FBVideoComponent.prototype, "startedBuffering", void 0);
    __decorate([
        Output()
    ], FBVideoComponent.prototype, "finishedBuffering", void 0);
    __decorate([
        Output()
    ], FBVideoComponent.prototype, "error", void 0);
    __decorate([
        FBMLInstanceMethod
    ], FBVideoComponent.prototype, "play", null);
    __decorate([
        FBMLInstanceMethod
    ], FBVideoComponent.prototype, "pause", null);
    __decorate([
        FBMLInstanceMethod
    ], FBVideoComponent.prototype, "seek", null);
    __decorate([
        FBMLInstanceMethod
    ], FBVideoComponent.prototype, "mute", null);
    __decorate([
        FBMLInstanceMethod
    ], FBVideoComponent.prototype, "unmute", null);
    __decorate([
        FBMLInstanceMethod
    ], FBVideoComponent.prototype, "isMuted", null);
    __decorate([
        FBMLInstanceMethod
    ], FBVideoComponent.prototype, "setVolume", null);
    __decorate([
        FBMLInstanceMethod
    ], FBVideoComponent.prototype, "getVolume", null);
    __decorate([
        FBMLInstanceMethod
    ], FBVideoComponent.prototype, "getCurrentPosition", null);
    __decorate([
        FBMLInstanceMethod
    ], FBVideoComponent.prototype, "getDuration", null);
    FBVideoComponent = __decorate([
        Component({
            selector: 'fb-video',
            template: ''
        })
    ], FBVideoComponent);
    return FBVideoComponent;
}(FBMLComponent));
export { FBVideoComponent };
//# sourceMappingURL=data:application/json;base64,