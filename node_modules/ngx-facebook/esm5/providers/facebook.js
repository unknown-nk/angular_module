import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @shortdesc
 * Angular 2 service to inject to use Facebook's SDK
 * @description
 * You only need to inject this service in your application if you aren't using [`FacebookModule`](../facebook-module).
 * @usage
 * ```typescript
 * import { FacebookService, InitParams } from 'ngx-facebook-sdk';
 *
 * constructor(private fb: FacebookService) {
 *
 *   const params: InitParams = {
 *
 *   };
 *
 *   fb.init(params);
 *
 * }
 * ```
 */
var FacebookService = /** @class */ (function () {
    function FacebookService() {
    }
    /**
     * This method is used to initialize and setup the SDK.
     * @param params {InitParams} Initialization parameters
     * @returns {Promise<any>}
     */
    FacebookService.prototype.init = function (params) {
        try {
            return Promise.resolve(FB.init(params));
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    /**
     * This method lets you make calls to the Graph API
     * @usage
     * ```typescript
     * this.fb.api('somepath')
     *   .then(res => console.log(res))
     *   .catch(e => console.log(e));
     * ```
     * @param path {string} The Graph API endpoint path that you want to call.
     * @param [method=get] {string} The HTTP method that you want to use for the API request.
     * @param [params] {Object} An object consisting of any parameters that you want to pass into your Graph API call.
     * @returns {Promise<any>}
     */
    FacebookService.prototype.api = function (path, method, params) {
        if (method === void 0) { method = 'get'; }
        if (params === void 0) { params = {}; }
        return new Promise(function (resolve, reject) {
            try {
                FB.api(path, method, params, function (response) {
                    if (!response) {
                        reject();
                    }
                    else if (response.error) {
                        reject(response.error);
                    }
                    else {
                        resolve(response);
                    }
                });
            }
            catch (e) {
                reject(e);
            }
        });
    };
    /**
     * This method is used to trigger different forms of Facebook created UI dialogs.
     * These dialogs include:
     * - Share dialog
     * - Login dialog
     * - Add page tab dialog
     * - Requests dialog
     * - Send dialog
     * - Payments dialog
     * - Go Live dialog
     * @param params {UIParams} A collection of parameters that control which dialog is loaded, and relevant settings.
     * @returns {Promise<UIResponse>}
     */
    FacebookService.prototype.ui = function (params) {
        return new Promise(function (resolve, reject) {
            try {
                FB.ui(params, function (response) {
                    if (!response)
                        reject();
                    else if (response.error)
                        reject(response.error);
                    else
                        resolve(response);
                });
            }
            catch (e) {
                reject(e);
            }
        });
    };
    /**
     * This method allows you to determine if a user is logged in to Facebook and has authenticated your app.
     * @param [forceFreshResponse=false] {boolean} Force a fresh response.
     * @returns {Promise<LoginStatus>}
     */
    FacebookService.prototype.getLoginStatus = function (forceFreshResponse) {
        return new Promise(function (resolve, reject) {
            try {
                FB.getLoginStatus(function (response) {
                    if (!response) {
                        reject();
                    }
                    else {
                        resolve(response);
                    }
                }, forceFreshResponse);
            }
            catch (e) {
                reject(e);
            }
        });
    };
    /**
     * Login the user
     * @usage
     * ```typescript
     * // login without options
     * this.fb.login()
     *   .then((response: LoginResponse) => console.log('Logged in', response))
     *   .catch(e => console.error('Error logging in'));
     *
     * // login with options
     * const options: LoginOptions = {
     *   scope: 'public_profile,user_friends,email,pages_show_list',
     *   return_scopes: true,
     *   enable_profile_selector: true
     * };
     * this.fb.login(options)
     *   .then(...)
     *   .catch(...);
     * ```
     * @param [options] {LoginOptions} Login options
     * @returns {Promise<LoginResponse>} returns a promise that resolves with [LoginResponse](../login-response) object, or rejects with an error
     */
    FacebookService.prototype.login = function (options) {
        return new Promise(function (resolve, reject) {
            try {
                FB.login(function (response) {
                    if (response.authResponse) {
                        resolve(response);
                    }
                    else {
                        reject();
                    }
                }, options);
            }
            catch (e) {
                reject(e);
            }
        });
    };
    /**
     * Logout the user
     * @usage
     * ```typescript
     * this.fb.logout().then(() => console.log('Logged out!'));
     * ```
     * @returns {Promise<any>} returns a promise that resolves when the user is logged out
     */
    FacebookService.prototype.logout = function () {
        return new Promise(function (resolve, reject) {
            try {
                FB.logout(function (response) {
                    resolve(response);
                });
            }
            catch (e) {
                reject(e);
            }
        });
    };
    /**
     * This synchronous function returns back the current authResponse.
     * @usage
     * ```typescript
     * import { AuthResponse, FacebookService } from 'ngx-facebook-sdk';
     *
     * ...
     *
     * const authResponse: AuthResponse = this.fb.getAuthResponse();
     * ```
     * @returns {AuthResponse} returns an [AuthResponse](../auth-response) object
     */
    FacebookService.prototype.getAuthResponse = function () {
        try {
            return FB.getAuthResponse();
        }
        catch (e) {
            console.error('ngx-facebook-sdk: ', e);
        }
    };
    FacebookService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FacebookService_Factory() { return new FacebookService(); }, token: FacebookService, providedIn: "root" });
    FacebookService = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], FacebookService);
    return FacebookService;
}());
export { FacebookService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZWJvb2suanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZmFjZWJvb2svIiwic291cmNlcyI6WyJwcm92aWRlcnMvZmFjZWJvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBZ0IzQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUlIO0lBQUE7S0FzTEM7SUFwTEM7Ozs7T0FJRztJQUNILDhCQUFJLEdBQUosVUFBSyxNQUFrQjtRQUNyQixJQUFJO1lBQ0YsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUN6QztRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7T0FZRztJQUNILDZCQUFHLEdBQUgsVUFBSSxJQUFZLEVBQUUsTUFBeUIsRUFBRSxNQUFnQjtRQUEzQyx1QkFBQSxFQUFBLGNBQXlCO1FBQUUsdUJBQUEsRUFBQSxXQUFnQjtRQUMzRCxPQUFPLElBQUksT0FBTyxDQUFNLFVBQUMsT0FBTyxFQUFFLE1BQU07WUFFdEMsSUFBSTtnQkFDRixFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQUMsUUFBYTtvQkFDekMsSUFBSSxDQUFDLFFBQVEsRUFBRTt3QkFDYixNQUFNLEVBQUUsQ0FBQztxQkFDVjt5QkFBTSxJQUFJLFFBQVEsQ0FBQyxLQUFLLEVBQUU7d0JBQ3pCLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ3hCO3lCQUFNO3dCQUNMLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztxQkFDbkI7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7YUFDSjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLE1BQU0sQ0FB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ICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEF1dGhSZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9hdXRoLXJlc3BvbnNlJztcbmltcG9ydCB7IEluaXRQYXJhbXMgfSBmcm9tICcuLi9tb2RlbHMvaW5pdC1wYXJhbXMnO1xuaW1wb3J0IHsgTG9naW5PcHRpb25zIH0gZnJvbSAnLi4vbW9kZWxzL2xvZ2luLW9wdGlvbnMnO1xuaW1wb3J0IHsgTG9naW5SZXNwb25zZSB9IGZyb20gJy4uL21vZGVscy9sb2dpbi1yZXNwb25zZSc7XG5pbXBvcnQgeyBMb2dpblN0YXR1cyB9IGZyb20gJy4uL21vZGVscy9sb2dpbi1zdGF0dXMnO1xuaW1wb3J0IHsgVUlQYXJhbXMgfSBmcm9tICcuLi9tb2RlbHMvdWktcGFyYW1zJztcbmltcG9ydCB7IFVJUmVzcG9uc2UgfSBmcm9tICcuLi9tb2RlbHMvdWktcmVzcG9uc2UnO1xuXG5kZWNsYXJlIHZhciBGQjogYW55O1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZXhwb3J0IHR5cGUgQXBpTWV0aG9kID0gJ2dldCcgfCAncG9zdCcgfCAnZGVsZXRlJztcblxuLyoqXG4gKiBAc2hvcnRkZXNjXG4gKiBBbmd1bGFyIDIgc2VydmljZSB0byBpbmplY3QgdG8gdXNlIEZhY2Vib29rJ3MgU0RLXG4gKiBAZGVzY3JpcHRpb25cbiAqIFlvdSBvbmx5IG5lZWQgdG8gaW5qZWN0IHRoaXMgc2VydmljZSBpbiB5b3VyIGFwcGxpY2F0aW9uIGlmIHlvdSBhcmVuJ3QgdXNpbmcgW2BGYWNlYm9va01vZHVsZWBdKC4uL2ZhY2Vib29rLW1vZHVsZSkuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEZhY2Vib29rU2VydmljZSwgSW5pdFBhcmFtcyB9IGZyb20gJ25neC1mYWNlYm9vay1zZGsnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZmI6IEZhY2Vib29rU2VydmljZSkge1xuICpcbiAqICAgY29uc3QgcGFyYW1zOiBJbml0UGFyYW1zID0ge1xuICpcbiAqICAgfTtcbiAqXG4gKiAgIGZiLmluaXQocGFyYW1zKTtcbiAqXG4gKiB9XG4gKiBgYGBcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgRmFjZWJvb2tTZXJ2aWNlIHtcblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB0byBpbml0aWFsaXplIGFuZCBzZXR1cCB0aGUgU0RLLlxuICAgKiBAcGFyYW0gcGFyYW1zIHtJbml0UGFyYW1zfSBJbml0aWFsaXphdGlvbiBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBpbml0KHBhcmFtczogSW5pdFBhcmFtcyk6IFByb21pc2U8YW55PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoRkIuaW5pdChwYXJhbXMpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGxldHMgeW91IG1ha2UgY2FsbHMgdG8gdGhlIEdyYXBoIEFQSVxuICAgKiBAdXNhZ2VcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiB0aGlzLmZiLmFwaSgnc29tZXBhdGgnKVxuICAgKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICAgKiAgIC5jYXRjaChlID0+IGNvbnNvbGUubG9nKGUpKTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSBwYXRoIHtzdHJpbmd9IFRoZSBHcmFwaCBBUEkgZW5kcG9pbnQgcGF0aCB0aGF0IHlvdSB3YW50IHRvIGNhbGwuXG4gICAqIEBwYXJhbSBbbWV0aG9kPWdldF0ge3N0cmluZ30gVGhlIEhUVFAgbWV0aG9kIHRoYXQgeW91IHdhbnQgdG8gdXNlIGZvciB0aGUgQVBJIHJlcXVlc3QuXG4gICAqIEBwYXJhbSBbcGFyYW1zXSB7T2JqZWN0fSBBbiBvYmplY3QgY29uc2lzdGluZyBvZiBhbnkgcGFyYW1ldGVycyB0aGF0IHlvdSB3YW50IHRvIHBhc3MgaW50byB5b3VyIEdyYXBoIEFQSSBjYWxsLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgYXBpKHBhdGg6IHN0cmluZywgbWV0aG9kOiBBcGlNZXRob2QgPSAnZ2V0JywgcGFyYW1zOiBhbnkgPSB7fSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICB0cnkge1xuICAgICAgICBGQi5hcGkocGF0aCwgbWV0aG9kLCBwYXJhbXMsIChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KHJlc3BvbnNlLmVycm9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB0byB0cmlnZ2VyIGRpZmZlcmVudCBmb3JtcyBvZiBGYWNlYm9vayBjcmVhdGVkIFVJIGRpYWxvZ3MuXG4gICAqIFRoZXNlIGRpYWxvZ3MgaW5jbHVkZTpcbiAgICogLSBTaGFyZSBkaWFsb2dcbiAgICogLSBMb2dpbiBkaWFsb2dcbiAgICogLSBBZGQgcGFnZSB0YWIgZGlhbG9nXG4gICAqIC0gUmVxdWVzdHMgZGlhbG9nXG4gICAqIC0gU2VuZCBkaWFsb2dcbiAgICogLSBQYXltZW50cyBkaWFsb2dcbiAgICogLSBHbyBMaXZlIGRpYWxvZ1xuICAgKiBAcGFyYW0gcGFyYW1zIHtVSVBhcmFtc30gQSBjb2xsZWN0aW9uIG9mIHBhcmFtZXRlcnMgdGhhdCBjb250cm9sIHdoaWNoIGRpYWxvZyBpcyBsb2FkZWQsIGFuZCByZWxldmFudCBzZXR0aW5ncy5cbiAgICogQHJldHVybnMge1Byb21pc2U8VUlSZXNwb25zZT59XG4gICAqL1xuICB1aShwYXJhbXM6IFVJUGFyYW1zKTogUHJvbWlzZTxVSVJlc3BvbnNlPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICB0cnkge1xuICAgICAgICBGQi51aShwYXJhbXMsIChyZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgICAgaWYoIXJlc3BvbnNlKSByZWplY3QoKTtcbiAgICAgICAgICBlbHNlIGlmKHJlc3BvbnNlLmVycm9yKSByZWplY3QocmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICAgIGVsc2UgcmVzb2x2ZShyZXNwb25zZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBhbGxvd3MgeW91IHRvIGRldGVybWluZSBpZiBhIHVzZXIgaXMgbG9nZ2VkIGluIHRvIEZhY2Vib29rIGFuZCBoYXMgYXV0aGVudGljYXRlZCB5b3VyIGFwcC5cbiAgICogQHBhcmFtIFtmb3JjZUZyZXNoUmVzcG9uc2U9ZmFsc2VdIHtib29sZWFufSBGb3JjZSBhIGZyZXNoIHJlc3BvbnNlLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxMb2dpblN0YXR1cz59XG4gICAqL1xuICBnZXRMb2dpblN0YXR1cyhmb3JjZUZyZXNoUmVzcG9uc2U/OiBib29sZWFuKTogUHJvbWlzZTxMb2dpblN0YXR1cz4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxMb2dpblN0YXR1cz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICB0cnkge1xuICAgICAgICBGQi5nZXRMb2dpblN0YXR1cygocmVzcG9uc2U6IExvZ2luU3RhdHVzKSA9PiB7XG4gICAgICAgICAgaWYgKCFyZXNwb25zZSkge1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZm9yY2VGcmVzaFJlc3BvbnNlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTG9naW4gdGhlIHVzZXJcbiAgICogQHVzYWdlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogLy8gbG9naW4gd2l0aG91dCBvcHRpb25zXG4gICAqIHRoaXMuZmIubG9naW4oKVxuICAgKiAgIC50aGVuKChyZXNwb25zZTogTG9naW5SZXNwb25zZSkgPT4gY29uc29sZS5sb2coJ0xvZ2dlZCBpbicsIHJlc3BvbnNlKSlcbiAgICogICAuY2F0Y2goZSA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBsb2dnaW5nIGluJykpO1xuICAgKlxuICAgKiAvLyBsb2dpbiB3aXRoIG9wdGlvbnNcbiAgICogY29uc3Qgb3B0aW9uczogTG9naW5PcHRpb25zID0ge1xuICAgKiAgIHNjb3BlOiAncHVibGljX3Byb2ZpbGUsdXNlcl9mcmllbmRzLGVtYWlsLHBhZ2VzX3Nob3dfbGlzdCcsXG4gICAqICAgcmV0dXJuX3Njb3BlczogdHJ1ZSxcbiAgICogICBlbmFibGVfcHJvZmlsZV9zZWxlY3RvcjogdHJ1ZVxuICAgKiB9O1xuICAgKiB0aGlzLmZiLmxvZ2luKG9wdGlvbnMpXG4gICAqICAgLnRoZW4oLi4uKVxuICAgKiAgIC5jYXRjaCguLi4pO1xuICAgKiBgYGBcbiAgICogQHBhcmFtIFtvcHRpb25zXSB7TG9naW5PcHRpb25zfSBMb2dpbiBvcHRpb25zXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPExvZ2luUmVzcG9uc2U+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggW0xvZ2luUmVzcG9uc2VdKC4uL2xvZ2luLXJlc3BvbnNlKSBvYmplY3QsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvclxuICAgKi9cbiAgbG9naW4ob3B0aW9ucz86IExvZ2luT3B0aW9ucyk6IFByb21pc2U8TG9naW5SZXNwb25zZT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxMb2dpblJlc3BvbnNlPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIEZCLmxvZ2luKChyZXNwb25zZTogTG9naW5SZXNwb25zZSkgPT4ge1xuICAgICAgICAgIGlmIChyZXNwb25zZS5hdXRoUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTG9nb3V0IHRoZSB1c2VyXG4gICAqIEB1c2FnZVxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIHRoaXMuZmIubG9nb3V0KCkudGhlbigoKSA9PiBjb25zb2xlLmxvZygnTG9nZ2VkIG91dCEnKSk7XG4gICAqIGBgYFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHVzZXIgaXMgbG9nZ2VkIG91dFxuICAgKi9cbiAgbG9nb3V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPGFueT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICB0cnkge1xuICAgICAgICBGQi5sb2dvdXQoKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgc3luY2hyb25vdXMgZnVuY3Rpb24gcmV0dXJucyBiYWNrIHRoZSBjdXJyZW50IGF1dGhSZXNwb25zZS5cbiAgICogQHVzYWdlXG4gICAqIGBgYHR5cGVzY3JpcHRcbiAgICogaW1wb3J0IHsgQXV0aFJlc3BvbnNlLCBGYWNlYm9va1NlcnZpY2UgfSBmcm9tICduZ3gtZmFjZWJvb2stc2RrJztcbiAgICpcbiAgICogLi4uXG4gICAqXG4gICAqIGNvbnN0IGF1dGhSZXNwb25zZTogQXV0aFJlc3BvbnNlID0gdGhpcy5mYi5nZXRBdXRoUmVzcG9uc2UoKTtcbiAgICogYGBgXG4gICAqIEByZXR1cm5zIHtBdXRoUmVzcG9uc2V9IHJldHVybnMgYW4gW0F1dGhSZXNwb25zZV0oLi4vYXV0aC1yZXNwb25zZSkgb2JqZWN0XG4gICAqL1xuICBnZXRBdXRoUmVzcG9uc2UoKTogQXV0aFJlc3BvbnNlIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIDxBdXRoUmVzcG9uc2U+RkIuZ2V0QXV0aFJlc3BvbnNlKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcignbmd4LWZhY2Vib29rLXNkazogJywgZSk7XG4gICAgfVxuICB9XG5cbn1cblxuIl19